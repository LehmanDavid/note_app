schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "note"
  """
  delete_note(
    """filter the rows which have to be deleted"""
    where: note_bool_exp!
  ): note_mutation_response

  """
  delete single row from the table: "note"
  """
  delete_note_by_pk(id: Int!): note

  """
  delete data from the table: "notes"
  """
  delete_notes(
    """filter the rows which have to be deleted"""
    where: notes_bool_exp!
  ): notes_mutation_response

  """
  delete single row from the table: "notes"
  """
  delete_notes_by_pk(id: uuid!): notes

  """
  insert data into the table: "note"
  """
  insert_note(
    """the rows to be inserted"""
    objects: [note_insert_input!]!

    """upsert condition"""
    on_conflict: note_on_conflict
  ): note_mutation_response

  """
  insert a single row into the table: "note"
  """
  insert_note_one(
    """the row to be inserted"""
    object: note_insert_input!

    """upsert condition"""
    on_conflict: note_on_conflict
  ): note

  """
  insert data into the table: "notes"
  """
  insert_notes(
    """the rows to be inserted"""
    objects: [notes_insert_input!]!

    """upsert condition"""
    on_conflict: notes_on_conflict
  ): notes_mutation_response

  """
  insert a single row into the table: "notes"
  """
  insert_notes_one(
    """the row to be inserted"""
    object: notes_insert_input!

    """upsert condition"""
    on_conflict: notes_on_conflict
  ): notes

  """
  update data of the table: "note"
  """
  update_note(
    """increments the numeric columns with given value of the filtered values"""
    _inc: note_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: note_set_input

    """filter the rows which have to be updated"""
    where: note_bool_exp!
  ): note_mutation_response

  """
  update single row of the table: "note"
  """
  update_note_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: note_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: note_set_input
    pk_columns: note_pk_columns_input!
  ): note

  """
  update data of the table: "notes"
  """
  update_notes(
    """sets the columns of the filtered rows to the given values"""
    _set: notes_set_input

    """filter the rows which have to be updated"""
    where: notes_bool_exp!
  ): notes_mutation_response

  """
  update single row of the table: "notes"
  """
  update_notes_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: notes_set_input
    pk_columns: notes_pk_columns_input!
  ): notes
}

"""
columns and relationships of "note"
"""
type note {
  body: String!
  id: Int!
  title: String!
}

"""
aggregated selection of "note"
"""
type note_aggregate {
  aggregate: note_aggregate_fields
  nodes: [note!]!
}

"""
aggregate fields of "note"
"""
type note_aggregate_fields {
  avg: note_avg_fields
  count(columns: [note_select_column!], distinct: Boolean): Int!
  max: note_max_fields
  min: note_min_fields
  stddev: note_stddev_fields
  stddev_pop: note_stddev_pop_fields
  stddev_samp: note_stddev_samp_fields
  sum: note_sum_fields
  var_pop: note_var_pop_fields
  var_samp: note_var_samp_fields
  variance: note_variance_fields
}

"""aggregate avg on columns"""
type note_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "note". All fields are combined with a logical 'AND'.
"""
input note_bool_exp {
  _and: [note_bool_exp!]
  _not: note_bool_exp
  _or: [note_bool_exp!]
  body: String_comparison_exp
  id: Int_comparison_exp
  title: String_comparison_exp
}

"""
unique or primary key constraints on table "note"
"""
enum note_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  note_pkey
}

"""
input type for incrementing numeric columns in table "note"
"""
input note_inc_input {
  id: Int
}

"""
input type for inserting data into table "note"
"""
input note_insert_input {
  body: String
  id: Int
  title: String
}

"""aggregate max on columns"""
type note_max_fields {
  body: String
  id: Int
  title: String
}

"""aggregate min on columns"""
type note_min_fields {
  body: String
  id: Int
  title: String
}

"""
response of any mutation on the table "note"
"""
type note_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [note!]!
}

"""
on_conflict condition type for table "note"
"""
input note_on_conflict {
  constraint: note_constraint!
  update_columns: [note_update_column!]! = []
  where: note_bool_exp
}

"""Ordering options when selecting data from "note"."""
input note_order_by {
  body: order_by
  id: order_by
  title: order_by
}

"""primary key columns input for table: note"""
input note_pk_columns_input {
  id: Int!
}

"""
select columns of table "note"
"""
enum note_select_column {
  """column name"""
  body

  """column name"""
  id

  """column name"""
  title
}

"""
input type for updating data in table "note"
"""
input note_set_input {
  body: String
  id: Int
  title: String
}

"""aggregate stddev on columns"""
type note_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type note_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type note_stddev_samp_fields {
  id: Float
}

"""aggregate sum on columns"""
type note_sum_fields {
  id: Int
}

"""
update columns of table "note"
"""
enum note_update_column {
  """column name"""
  body

  """column name"""
  id

  """column name"""
  title
}

"""aggregate var_pop on columns"""
type note_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type note_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type note_variance_fields {
  id: Float
}

"""
columns and relationships of "notes"
"""
type notes {
  body: String!
  id: uuid!
  title: String!
}

"""
aggregated selection of "notes"
"""
type notes_aggregate {
  aggregate: notes_aggregate_fields
  nodes: [notes!]!
}

"""
aggregate fields of "notes"
"""
type notes_aggregate_fields {
  count(columns: [notes_select_column!], distinct: Boolean): Int!
  max: notes_max_fields
  min: notes_min_fields
}

"""
Boolean expression to filter rows from the table "notes". All fields are combined with a logical 'AND'.
"""
input notes_bool_exp {
  _and: [notes_bool_exp!]
  _not: notes_bool_exp
  _or: [notes_bool_exp!]
  body: String_comparison_exp
  id: uuid_comparison_exp
  title: String_comparison_exp
}

"""
unique or primary key constraints on table "notes"
"""
enum notes_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  notes_pkey
}

"""
input type for inserting data into table "notes"
"""
input notes_insert_input {
  body: String
  id: uuid
  title: String
}

"""aggregate max on columns"""
type notes_max_fields {
  body: String
  id: uuid
  title: String
}

"""aggregate min on columns"""
type notes_min_fields {
  body: String
  id: uuid
  title: String
}

"""
response of any mutation on the table "notes"
"""
type notes_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [notes!]!
}

"""
on_conflict condition type for table "notes"
"""
input notes_on_conflict {
  constraint: notes_constraint!
  update_columns: [notes_update_column!]! = []
  where: notes_bool_exp
}

"""Ordering options when selecting data from "notes"."""
input notes_order_by {
  body: order_by
  id: order_by
  title: order_by
}

"""primary key columns input for table: notes"""
input notes_pk_columns_input {
  id: uuid!
}

"""
select columns of table "notes"
"""
enum notes_select_column {
  """column name"""
  body

  """column name"""
  id

  """column name"""
  title
}

"""
input type for updating data in table "notes"
"""
input notes_set_input {
  body: String
  id: uuid
  title: String
}

"""
update columns of table "notes"
"""
enum notes_update_column {
  """column name"""
  body

  """column name"""
  id

  """column name"""
  title
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "note"
  """
  note(
    """distinct select on columns"""
    distinct_on: [note_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [note_order_by!]

    """filter the rows returned"""
    where: note_bool_exp
  ): [note!]!

  """
  fetch aggregated fields from the table: "note"
  """
  note_aggregate(
    """distinct select on columns"""
    distinct_on: [note_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [note_order_by!]

    """filter the rows returned"""
    where: note_bool_exp
  ): note_aggregate!

  """fetch data from the table: "note" using primary key columns"""
  note_by_pk(id: Int!): note

  """
  fetch data from the table: "notes"
  """
  notes(
    """distinct select on columns"""
    distinct_on: [notes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [notes_order_by!]

    """filter the rows returned"""
    where: notes_bool_exp
  ): [notes!]!

  """
  fetch aggregated fields from the table: "notes"
  """
  notes_aggregate(
    """distinct select on columns"""
    distinct_on: [notes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [notes_order_by!]

    """filter the rows returned"""
    where: notes_bool_exp
  ): notes_aggregate!

  """fetch data from the table: "notes" using primary key columns"""
  notes_by_pk(id: uuid!): notes
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

type subscription_root {
  """
  fetch data from the table: "note"
  """
  note(
    """distinct select on columns"""
    distinct_on: [note_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [note_order_by!]

    """filter the rows returned"""
    where: note_bool_exp
  ): [note!]!

  """
  fetch aggregated fields from the table: "note"
  """
  note_aggregate(
    """distinct select on columns"""
    distinct_on: [note_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [note_order_by!]

    """filter the rows returned"""
    where: note_bool_exp
  ): note_aggregate!

  """fetch data from the table: "note" using primary key columns"""
  note_by_pk(id: Int!): note

  """
  fetch data from the table: "notes"
  """
  notes(
    """distinct select on columns"""
    distinct_on: [notes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [notes_order_by!]

    """filter the rows returned"""
    where: notes_bool_exp
  ): [notes!]!

  """
  fetch aggregated fields from the table: "notes"
  """
  notes_aggregate(
    """distinct select on columns"""
    distinct_on: [notes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [notes_order_by!]

    """filter the rows returned"""
    where: notes_bool_exp
  ): notes_aggregate!

  """fetch data from the table: "notes" using primary key columns"""
  notes_by_pk(id: uuid!): notes
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

